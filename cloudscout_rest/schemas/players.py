from cloudscout_rest.schemas.enums import Sports
from cloudscout_rest.schemas.base import PlayerSchema, StatSchema

FOOTBALL = PlayerSchema(Sports.FOOTBALL, [
    StatSchema('general', [
        'all_purpose_plays',
        'all_purpose_yds',
        'all_purpose_yds_per_game',
        'games_played',
        'games_started',
        'points',
        'touchdowns',
    ]),
    StatSchema('offensive', [
        'completion_pct',
        'completions_per_game',
        'first_downs',
        'first_downs_passing',
        'first_downs_rushing',
        'fumbles_lost',
        'interceptions',
        'pass_attempts',
        'passing_eff',
        'passing_tds',
        'passing_yds',
        'passing_yds_per_game',
        'penalties',
        'penalties_per_game',
        'penalty_yds',
        'penalty_yds_per_game',
        'plays',
        'receiving_longest',
        'receiving_tds',
        'receiving_yds',
        'receiving_yds_per_game',
        'receptions',
        'receptions_per_game',
        'redzone_attempts',
        'redzone_passing_tds',
        'redzone_pts',
        'redzone_rushing_tds',
        'redzone_scores',
        'rush_attempts',
        'rush_net_yds',
        'rush_yds_per_game',
        'rushing_longest',
        'rushing_tds',
        'rushing_yds',
        'rushing_yds_lost',
        'third_att',
        'third_conv',
        'total_offensive_plays',
        'total_offensive_yds',
        'total_offensive_yds_per_game',
        'total_offensive_yds_per_play',
        'yds',
        'yds_per_completion',
        'yds_per_play',
        'yds_per_reception',
        'yds_per_rush',
    ]),
    StatSchema('defensive', [
        'blocked',
        'fumbles_forced',
        'fumbles_recovered',
        'fumbles_returned',
        'fumbles_returned_tds',
        'interception_yds',
        'interceptions',
        'interceptions_returned_tds',
        'pass_breakups',
        'passes_defended',
        'pts_off_turnover',
        'redzone_end_downs',
        'redzone_end_interceptions',
        'sack_yds',
        'sacks_assisted',
        'sacks_solo',
        'sacks_unassisted',
        'safeties',
        'tackle_yds',
        'tackles',
        'tackles_assisted',
        'tackles_for_loss_assisted',
        'tackles_for_loss_solo',
        'tackles_solo',
    ]),
    StatSchema('special', [
        'fc_yds',
        'fga1_19',
        'fga20_29',
        'fga30_39',
        'fga40_49',
        'fga50_59',
        'fga60',
        'fgm1_19',
        'fgm20_29',
        'fgm30_39',
        'fgm40_49',
        'fgm50_59',
        'fgm60',
        'field_goal_blocks_allowed',
        'field_goals',
        'field_goals_attempted',
        'field_goals_made',
        'fumble_return_pat',
        'kick_pat',
        'kick_return_pat',
        'kickoff_return_tds',
        'kickoff_return_yds',
        'kickoff_returns',
        'kickoff_touchbacks',
        'kickoff_yds',
        'kickoffs',
        'longest_fgm',
        'net_kickoff_yds',
        'net_punt_yds',
        'onside_attempts',
        'pass_2pt_att',
        'pass_2pt_conv',
        'pat_att',
        'punt_longest',
        'punt_return_tds',
        'punt_return_yds',
        'punt_returns',
        'punt_touchbacks',
        'punt_yds',
        'punts',
        'punts_inside_twenty',
        'receiving_pat',
        'redzone_end_field_goal',
        'redzone_end_fumble',
        'redzone_fg_made',
        'rush_2pt_att',
        'rush_pat',
        'successful_onside_kicks',
    ])
])

BASEBALL = PlayerSchema(Sports.BASEBALL, [
    StatSchema('general', [
        'games_played',
        'games_started',
    ]),
    StatSchema('hitting', [
        'batting_average',
        'on_base_percent',
        'slugging_percent',
        'runs',
        'at_bats',
        'hits',
        'doubles',
        'triples',
        'total_bases',
        'homeruns',
        'runs_batted_in',
        'walks',
        'hit_by_pitch',
        'sf',
        'sh',
        'strikeouts',
        'opposite_dp',
        'caught_stealing',
        'picked',
        'stolen_bases',
        'intentional_walks',
        'rbi_2_outs',
    ]),
    StatSchema('pitching', [
        'appearances',
        'games_saved',
        'era',
        'innings_pitched',
        'cg',
        'earned_runs',
        'strikeouts',
        'sho',
        'batters_faced',
        'poab',
        'doubles_allowed',
        'triples_allowed',
        'balks',
        'homeruns_allowed',
        'wp',
        'hit_batters',
        'inh_runners',
        'inh_runners_scored',
        'sha',
        'sfa',
        'pitches_thrown',
        'groundouts',
        'flyouts',
        'wins',
        'losses',
        'saves',
        'kl',
        'pickoffs',
        
    ]),
    StatSchema('fielding', [
        'po',
        'a',
        'tc',
        'errors',
        'fielding_percentage',
        'ci',
        'pb',
        'sba',
        'csb',
        'idp',
        'tp',
    ])
])

BASKETBALL = PlayerSchema(Sports.BASKETBALL, [
    StatSchema('general', [
        'games_played',
        'games',
        'minutes_played',
        'total_rebounds',
        'personal_fouls',
        'disqualifying_fouls',
        'double_doubles',
        'technical_fouls',
        'triple_doubles',
    ]),
    StatSchema('offensive', [
        'field_goals_made',
        'field_goals_attempted',
        'field_goal_percentage',
        'three_point_field_goals',
        'three_point_field_goals_attempted',
        'three_point_field_goal_percentage',
        'free_throws',
        'free_throw_attempts',
        'free_throw_percentage',
        'points',
        'average_points',
        'offensive_rebounds',
        'assists',
        'turnovers',
    ]),
    StatSchema('defensive', [
        'defensive_rebounds',
        'steals',
        'blocks',
    ])
])

HOCKEY = PlayerSchema(Sports.HOCKEY, [
    StatSchema('general', [
        'shootouts',
        'hat_tricks',
        'faceoffs_won',
        'faceoffs_lost',
        'faceoff_percentage',
        'penalties',
        'penalty_minutes',
        'games_miscellaneous',
        'disqualifications',
        'plus_minus',
    ]),
    StatSchema('offensive', [
        'goals',
        'assists',
        'points',
        'shots',
        'short_handed_goals',
        'empty_net_goals',
        'game_winning_goals',
        'game_tying_goals',
        'overtime_goals',
        'power_play_goals',
        'power_play_assists',
        'power_play_shots',
        'power_play_percentage',
        'power_play_shot_attempts',
    ]),
    StatSchema('goalie', [
        'goalie_minutes',
        'goals_against',
        'power_play_goals_against',
        'saves',
        'save_percentage',
        'shutouts',
        'goalie_won',
        'goalie_loss',
        'goalie_tied',
        'goals_against_average',
    ])
])

SOCCER = PlayerSchema(Sports.SOCCER, [
    StatSchema('general', [
        'games_played',
        'games',
        'fouls',
        'red_cards',
        'yellow_cards',
        'penalty_kicks',
        'penalty_kick_attempts',
        'corners',
    ]),
    StatSchema('offensive', [
        'goals',
        'assists',
        'points',
        'shot_attempts',
        'shots_on_goal',
        'golden_goals',
        'game_winning_goals',
    ]),
    StatSchema('defensive', [
        'goals_conceded',
        'goalie_games_played',
        'goalie_minutes_played',
        'goals_allowed',
        'goals_allowed_average',
        'saves',
        'save_percentage',
        'shutouts',
        'combined_shutouts',
        'goalie_wins',
        'goalie_losses',
        'goalie_ties',
        'defensive_saves',
    ]),
])

LACROSSE = PlayerSchema(Sports.LACROSSE, [
    StatSchema('general', [
        'games_played',
        'games',
        'fouls',
        'games_started',
        'ground_balls',
        'turnovers',
        'free_position_shots',
        'free_position_goals',
        'red_cards',
        'yellow_cards',
        'clears',
        'clear_attempts',
        'man_up_games',
        'man_down_games',
        'faceoffs_won',
        'faceoffs_taken',
        'faceoffs_percentage',
        'penalties',
        'penalty_time',
        'clear_percentage',
    ]),
    StatSchema('offensive', [
        'goals',
        'assists',
        'points',
        'shots',
        'shot_percentage',
        'shots_on_goal',
        'shot_on_goal_percentage',
        'game_winning_goals',
        'points_per_game',
        'short_handed_goals',
        'draw_controls',
        'attempts',
        'overtime_goals',
    ]),
    StatSchema('defensive', [
        'caused_turnovers',
        'goalie_games_played',
        'goalie_mins',
        'goals_allowed',
        'goals_against_average',
        'saves',
        'save_percentage',
    ])
])

VOLLEYBALL = PlayerSchema(Sports.VOLLEYBALL, [
    StatSchema('general', [
        'games_played',
        'minutes_played',
        'matches_started',
        'errors',
        'triple_double',
    ]),
    StatSchema('offensive', [
        'serves',
        'kills',
        'total_attacks',
        'hit_percentage',
        'assists',
        'aces',
        'points',
    ]),
    StatSchema('defensive', [
        'serve_error',
        'digs',
        'reception_errors',
        'block_solos',
        'block_assists',
        'block_errors',
        'ball_handling_errors',
    ])
])

FIELD_HOCKEY = PlayerSchema(Sports.FIELD_HOCKEY, [
    StatSchema('general', [
        'games_played',
        'fouls',
        'red_cards',
        'yellow_cards',
        'green_cards',
        'minutes',
        'corners',
        'penalty_strokes',
        'penalty_strokes_allowed',
    ]),
    StatSchema('offensive', [
        'goals',
        'assists',
        'points',
        'shot_attempts',
        'game_winners',
    ]),
    StatSchema('defensive', [
        'goalie_games_played',
        'goalie_games_started',
        'goals_against',
        'goals_against_average',
        'saves',
        'save_percentage',
        'shutouts',
        'goalie_wins',
        'goalie_losses',
        'defensive_saves',
    ])
])

SOFTBALL = PlayerSchema(Sports.SOFTBALL, [
    StatSchema('general', [
        'games_played',
        'games_started',
        'games',
    ]),
    StatSchema('hitting', [
        'batting_average',
        'on_base_percent',
        'slugging_percent',
        'runs',
        'at_bats',
        'hits',
        'doubles',
        'triples',
        'total_bases',
        'homeruns',
        'runs_batted_in',
        'walks',
        'hit_by_pitch',
        'sf',
        'sh',
        'strikeouts',
        'strikeouts_looking',
        'opposite_dp',
        'caught_stealing',
        'picked',
        'stolen_bases',
        'intentional_walks',
        'rbi_2_outs',
        'double_plays',
        'groundout_double_plays',
        'cso',
    ]),
    StatSchema('pitching', [
        'appearances',
        'games_saved',
        'era',
        'earned_runs',
        'innings_pitched',
        'cg',
        'strikeouts',
        'sho',
        'batters_faced',
        'hits_allowed',
        'poab',
        'doubles_allowed',
        'triples_allowed',
        'balks',
        'homeruns_allowed',
        'wp',
        'hit_batters',
        'inh_runners',
        'inh_runners_scored',
        'sha',
        'sfa',
        'pitches_thrown',
        'groundouts',
        'flyouts',
        'wins',
        'losses',
        'saves',
        'kl',
        'pickoffs',
        'wild_pitches',
        'cia',
    ]),
    StatSchema('fielding', [
        'po',
        'a',
        'tc',
        'errors',
        'fielding_percentage',
        'ci',
        'pb',
        'sba',
        'csb',
        'idp',
        'tp',
    ])
])
