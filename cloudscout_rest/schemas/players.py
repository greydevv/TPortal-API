from cloudscout_rest.schemas.enums import Sports
from cloudscout_rest.schemas.base import PlayerSchema, StatSchema

FOOTBALL = PlayerSchema(Sports.FOOTBALL, [
    StatSchema('general', [
        'all_purpose_plays',
        'all_purpose_yds',
        'all_purpose_yds_per_game',
        'games_played',
        'games_started',
        'points',
        'touchdowns',
    ]),
    StatSchema('offensive', [
        'completion_pct',
        'completions_per_game',
        'first_downs',
        'first_downs_passing',
        'first_downs_rushing',
        'fumbles_lost',
        'interceptions',
        'pass_attempts',
        'passing_eff',
        'passing_tds',
        'passing_yds',
        'passing_yds_per_game',
        'penalties',
        'penalties_per_game',
        'penalty_yds',
        'penalty_yds_per_game',
        'plays',
        'receiving_longest',
        'receiving_tds',
        'receiving_yds',
        'receiving_yds_per_game',
        'receptions',
        'receptions_per_game',
        'redzone_attempts',
        'redzone_passing_tds',
        'redzone_pts',
        'redzone_rushing_tds',
        'redzone_scores',
        'rush_attempts',
        'rush_net_yds',
        'rush_yds_per_game',
        'rushing_longest',
        'rushing_tds',
        'rushing_yds',
        'rushing_yds_lost',
        'third_att',
        'third_conv',
        'total_offensive_plays',
        'total_offensive_yds',
        'total_offensive_yds_per_game',
        'total_offensive_yds_per_play',
        'yds',
        'yds_per_completion',
        'yds_per_play',
        'yds_per_reception',
        'yds_per_rush',
    ]),
    StatSchema('defensive', [
        'blocked',
        'fumbles_forced',
        'fumbles_recovered',
        'fumbles_returned',
        'fumbles_returned_tds',
        'interception_yds',
        'interceptions',
        'interceptions_returned_tds',
        'pass_breakups',
        'passes_defended',
        'pts_off_turnover',
        'redzone_end_downs',
        'redzone_end_interceptions',
        'sack_yds',
        'sacks_assisted',
        'sacks_solo',
        'sacks_unassisted',
        'safeties',
        'tackle_yds',
        'tackles',
        'tackles_assisted',
        'tackles_for_loss_assisted',
        'tackles_for_loss_solo',
        'tackles_solo',
    ]),
    StatSchema('special', [
        'fc_yds',
        'fga1_19',
        'fga20_29',
        'fga30_39',
        'fga40_49',
        'fga50_59',
        'fga60',
        'fgm1_19',
        'fgm20_29',
        'fgm30_39',
        'fgm40_49',
        'fgm50_59',
        'fgm60',
        'field_goal_blocks_allowed',
        'field_goals',
        'field_goals_attempted',
        'field_goals_made',
        'fumble_return_pat',
        'kick_pat',
        'kick_return_pat',
        'kickoff_return_tds',
        'kickoff_return_yds',
        'kickoff_returns',
        'kickoff_touchbacks',
        'kickoff_yds',
        'kickoffs',
        'longest_fgm',
        'net_kickoff_yds',
        'net_punt_yds',
        'onside_attempts',
        'pass_2pt_att',
        'pass_2pt_conv',
        'pat_att',
        'punt_longest',
        'punt_return_tds',
        'punt_return_yds',
        'punt_returns',
        'punt_touchbacks',
        'punt_yds',
        'punts',
        'punts_inside_twenty',
        'receiving_pat',
        'redzone_end_field_goal',
        'redzone_end_fumble',
        'redzone_fg_made',
        'rush_2pt_att',
        'rush_pat',
        'successful_onside_kicks',
    ])
])

SOCCER = PlayerSchema(Sports.SOCCER, [
    StatSchema('general', [
        'games_played',
        'goals',
        'assists',
        'points',
        'shot_attempts',
        'shots_on_goal',
        'fouls',
        'red_cards',
        'yellow_cards',
        'goals_conceded', # <-- 'GC' ?
        'goalie_games_played',
        'golden_goals', # <-- 'GGS' ?
        'goalie_mins_played',
        'goals_against',
        'goals_allowed_average',
        'saves',
        'save_percent',
        'shutouts',
        'combined_shots',
        'g_wins', # <-- wtf is this
        'g_loss', # <-- wtf is this
        'g_ties', # <-- wtf is this
        'dsaves', # <-- wtf is this
        'penalty_kicks',
        'penalty_kick_attempts',
        'corners',
        'game_winning_goals'
    ])
])

LACROSSE = PlayerSchema(Sports.LACROSSE, [
    StatSchema('general', [
        'g',
        'gs',
        'goals',
        'assists',
        'points',
        'shots',
        'shot_percentage',
        'shots_on_goal',
        'shots_on_goal_percentage',
        'game_winning_goals',
        'man_up_goals',
        'man_down_goals',
        'gb',
        'to',
        'ct',
        'faceoffs_won',
        'faceoffs_taken',
        'faceoff_percent',
        'pen',
        'pen_time',
        'ggp',
        'ggs',
        'g_min',
        'goals_allowed',
        'gaa',
        'saves',
        'save_percent',
        'rc',
        'yc',
        'clears',
        'att',
        'clear_percent',
        'otg'
    ])
])

# BASEBALL = PlayerSchema(Sports.BASEBALL, [])
# BASKETBALL = PlayerSchema(Sports.BASKETBALL, [])








